services:
    database:
        container_name: postgres_container
        image: postgres:17-bookworm
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            PGDATA: "/var/lib/postgresql/data/pgdata"
        volumes:
            - postgre-data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        networks:
            - app-network
        healthcheck:
            test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
            interval: 5s
            timeout: 5s
            retries: 10

    database-admin:
        container_name: pgadmin_container
        image: dpage/pgadmin4:latest
        restart: unless-stopped
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
        ports:
            - "80:80"
        networks:
            - app-network
        depends_on:
            - database

    redis: 
        container_name: redis
        image: redis:latest
        restart: unless-stopped
        ports:
            - "6379:6379"
        volumes:
            - redis-data:/var/lib/redis/data
        networks:
            - app-network
        
    celery-worker:
        container_name: celery-worker
        build:
            context: /backend
            dockerfile: Dockerfile
        command: uv run celery -A celery worker --loglevel=info
        volumes:
            - celery-worker-data:/var/lib/celery/worker/data
        environment:
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
        links:
            - redis
        depends_on:
            - database
            - redis
        networks:
            -  app-network

    celery-beat:
        container_name: celery-beat
        build:
            context: /backend
            dockerfile: Dockerfile
        command: uv run celery -A celery beat --loglevel=info
        volumes: 
            - celery-worker-data:/var/lib/celery/worker/data
        environment:
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
        depends_on:
            - database
            - redis
        networks:
            - app-network

    celery-flower:
        container_name: celery-flower
        image: mher/flower:latest
        command: celery -A celery flower --loglevel=info --port=5002
        ports:
            - "5002:5002"
        environment:
            CELERY_BROKER_URL: ${CELERY_BROKER_URL}
            FLOWER_BASIC: ${POSTGRES_USER}:${POSTGRES_PASSWORD}
        depends_on:
            - redis
            - celery-worker
        networks:
            - app-network

    backend:
        build: 
            context: /backend
            dockerfile: Dockerfile
        command: uv run uvicorn main:app --host=0.0.0.0 --port=8000
        restart: unless-stopped
        environment:
            DB_NAME: ${POSTGRES_DB}
            DB_HOST: ${POSTGRES_HOST}
            DB_PORT: ${POSTGRES_PORT}
            DB_USER: ${POSTGRES_USER}
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
        ports:
            - "8000:8000"
        networks:
            - app-network
        develop:
            watch:
                - action: sync
                  path: .
                  target: /backend
                  ignore: 
                    - .venv/
                
                - action: rebuild
                  path: ./uv.lock
        env_file:
            - .env
        depends_on:
            - database
            - redis
            - celery-worker
            - ollama
    
    telegram-bot:
        build: 
            context: /bot
            dockerfile: Dockerfile
        restart: unless-stopped
        environment:
            TOKEN: ${TELEGRAM_TOKEN}
            DB_HOST: ${POSTGRES_HOST}
            DB_PORT: ${POSTGRES_PORT}
            DB_USER: ${POSTGRES_USER}
            DB_NAME: ${POSTGRES_DB}
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
            BACKEND_ENDPOINT: ${BACKEND_ENDPOINT}
        ports: 
            - "8080:8080"
        networks:
            - app-network
        develop:
            watch:
                - action: sync
                  path: .
                  target: /bot
                  ignore: 
                    - .venv/
                
                - action: rebuild
                  path: ./uv.lock
        env_file:
            - .env
        depends_on:
            - database

    ollama:
        image: ollama/ollama:latest
        restart: unless-stopped
        ports:
            - "11434:11434"
        volumes:
            - ollama-data:/var/lib/ollama/data
        deploy:
            resources:
              reservations:
                devices:
                  - driver: nvidia
                    capabilities: [gpu]
        networks:
            - app-network
                

volumes:
    postgre-data:
    ollama-data:
    redis-data:
    celery-worker-data:

networks:
    app-network:
        driver: bridge 
